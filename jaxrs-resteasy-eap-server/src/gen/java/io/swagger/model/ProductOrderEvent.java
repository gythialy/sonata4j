package io.swagger.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import javax.validation.constraints.NotNull;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

@ApiModel(description = "ProductOrder structure used for notification")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaResteasyEapServerCodegen", date = "2020-05-09T02:51:53.195Z")
public class ProductOrderEvent {

    private String baseType = null;
    private String schemaLocation = null;
    private String type = null;
    private Date completionDate = null;
    private Date expectedCompletionDate = null;
    private String externalId = null;
    private String id = null;
    private List<Note> note = new ArrayList<Note>();
    private List<OrderItemEvent> orderItem = new ArrayList<OrderItemEvent>();
    private List<OrderMessage> orderMessage = new ArrayList<OrderMessage>();
    private String orderVersion = "1";
    private String projectId = null;
    private List<RelatedParty> relatedParty = new ArrayList<RelatedParty>();
    private Date requestedCompletionDate = null;
    private Date requestedStartDate = null;
    private ProductOrderStateType state = null;

    /**
     *
     **/

    @ApiModelProperty(value = "")
    @JsonProperty("@baseType")
    public String getBaseType() {
        return baseType;
    }

    public void setBaseType(String baseType) {
        this.baseType = baseType;
    }

    /**
     *
     **/

    @ApiModelProperty(value = "")
    @JsonProperty("@schemaLocation")
    public String getSchemaLocation() {
        return schemaLocation;
    }

    public void setSchemaLocation(String schemaLocation) {
        this.schemaLocation = schemaLocation;
    }

    /**
     *
     **/

    @ApiModelProperty(value = "")
    @JsonProperty("@type")
    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    /**
     * The date the order is completed. Format is YYYY-MM-DDThh:mmTZD (e.g. 1997-07-16T19:20+01:00)
     **/

    @ApiModelProperty(value = "The date the order is completed. Format is YYYY-MM-DDThh:mmTZD (e.g. 1997-07-16T19:20+01:00)")
    @JsonProperty("completionDate")
    public Date getCompletionDate() {
        return completionDate;
    }

    public void setCompletionDate(Date completionDate) {
        this.completionDate = completionDate;
    }

    /**
     * Expected delivery date amended by the provider
     **/

    @ApiModelProperty(value = "Expected delivery date amended by the provider")
    @JsonProperty("expectedCompletionDate")
    public Date getExpectedCompletionDate() {
        return expectedCompletionDate;
    }

    public void setExpectedCompletionDate(Date expectedCompletionDate) {
        this.expectedCompletionDate = expectedCompletionDate;
    }

    /**
     * A number that uniquely identifies an order within the buyer&#39;s enterprise.
     **/

    @ApiModelProperty(required = true, value = "A number that uniquely identifies an order within the buyer's enterprise.")
    @JsonProperty("externalId")
    @NotNull
    public String getExternalId() {
        return externalId;
    }

    public void setExternalId(String externalId) {
        this.externalId = externalId;
    }

    /**
     * Unique (within the ordering domain) identifier for the order that is generated by the seller when the order is initially accepted.
     **/

    @ApiModelProperty(required = true, value = "Unique (within the ordering domain) identifier for the order that is generated by the seller when the order is initially accepted.")
    @JsonProperty("id")
    @NotNull
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    /**
     *
     **/

    @ApiModelProperty(value = "")
    @JsonProperty("note")
    public List<Note> getNote() {
        return note;
    }

    public void setNote(List<Note> note) {
        this.note = note;
    }

    /**
     *
     **/

    @ApiModelProperty(required = true, value = "")
    @JsonProperty("orderItem")
    @NotNull
    public List<OrderItemEvent> getOrderItem() {
        return orderItem;
    }

    public void setOrderItem(List<OrderItemEvent> orderItem) {
        this.orderItem = orderItem;
    }

    /**
     *
     **/

    @ApiModelProperty(value = "")
    @JsonProperty("orderMessage")
    public List<OrderMessage> getOrderMessage() {
        return orderMessage;
    }

    public void setOrderMessage(List<OrderMessage> orderMessage) {
        this.orderMessage = orderMessage;
    }

    /**
     * The version number that the Buyer uses to refer to this particular version of the order
     **/

    @ApiModelProperty(required = true, value = "The version number that the Buyer uses to refer to this particular version of the order")
    @JsonProperty("orderVersion")
    @NotNull
    public String getOrderVersion() {
        return orderVersion;
    }

    public void setOrderVersion(String orderVersion) {
        this.orderVersion = orderVersion;
    }

    /**
     * An identifier that is used to group Orders that represent a unit of functionality that is important to a Buyer.  A Project can be used to relate multiple Orders together.
     **/

    @ApiModelProperty(value = "An identifier that is used to group Orders that represent a unit of functionality that is important to a Buyer.  A Project can be used to relate multiple Orders together.")
    @JsonProperty("projectId")
    public String getProjectId() {
        return projectId;
    }

    public void setProjectId(String projectId) {
        this.projectId = projectId;
    }

    /**
     *
     **/

    @ApiModelProperty(required = true, value = "")
    @JsonProperty("relatedParty")
    @NotNull
    public List<RelatedParty> getRelatedParty() {
        return relatedParty;
    }

    public void setRelatedParty(List<RelatedParty> relatedParty) {
        this.relatedParty = relatedParty;
    }

    /**
     * Identifies the buyer&#39;s desired due date (requested delivery date). Cannot be requested on cancelled orders.  Format is YYYY-MM-DDThh:mmTZD (e.g. 1997-07-16T19:20+01:00).
     **/

    @ApiModelProperty(required = true, value = "Identifies the buyer's desired due date (requested delivery date). Cannot be requested on cancelled orders.  Format is YYYY-MM-DDThh:mmTZD (e.g. 1997-07-16T19:20+01:00).")
    @JsonProperty("requestedCompletionDate")
    @NotNull
    public Date getRequestedCompletionDate() {
        return requestedCompletionDate;
    }

    public void setRequestedCompletionDate(Date requestedCompletionDate) {
        this.requestedCompletionDate = requestedCompletionDate;
    }

    /**
     * The buyer&#39;s requested date that order processing should start. Format is YYYY-MM-DDThh:mmTZD (e.g. 1997-07-16T19:20+01:00).
     **/

    @ApiModelProperty(value = "The buyer's requested date that order processing should start. Format is YYYY-MM-DDThh:mmTZD (e.g. 1997-07-16T19:20+01:00).")
    @JsonProperty("requestedStartDate")
    public Date getRequestedStartDate() {
        return requestedStartDate;
    }

    public void setRequestedStartDate(Date requestedStartDate) {
        this.requestedStartDate = requestedStartDate;
    }

    /**
     *
     **/

    @ApiModelProperty(required = true, value = "")
    @JsonProperty("state")
    @NotNull
    public ProductOrderStateType getState() {
        return state;
    }

    public void setState(ProductOrderStateType state) {
        this.state = state;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProductOrderEvent productOrderEvent = (ProductOrderEvent) o;
        return Objects.equals(baseType, productOrderEvent.baseType) &&
                Objects.equals(schemaLocation, productOrderEvent.schemaLocation) &&
                Objects.equals(type, productOrderEvent.type) &&
                Objects.equals(completionDate, productOrderEvent.completionDate) &&
                Objects.equals(expectedCompletionDate, productOrderEvent.expectedCompletionDate) &&
                Objects.equals(externalId, productOrderEvent.externalId) &&
                Objects.equals(id, productOrderEvent.id) &&
                Objects.equals(note, productOrderEvent.note) &&
                Objects.equals(orderItem, productOrderEvent.orderItem) &&
                Objects.equals(orderMessage, productOrderEvent.orderMessage) &&
                Objects.equals(orderVersion, productOrderEvent.orderVersion) &&
                Objects.equals(projectId, productOrderEvent.projectId) &&
                Objects.equals(relatedParty, productOrderEvent.relatedParty) &&
                Objects.equals(requestedCompletionDate, productOrderEvent.requestedCompletionDate) &&
                Objects.equals(requestedStartDate, productOrderEvent.requestedStartDate) &&
                Objects.equals(state, productOrderEvent.state);
    }

    @Override
    public int hashCode() {
        return Objects.hash(baseType, schemaLocation, type, completionDate, expectedCompletionDate, externalId, id, note, orderItem, orderMessage, orderVersion, projectId, relatedParty, requestedCompletionDate, requestedStartDate, state);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ProductOrderEvent {\n");

        sb.append("    baseType: ").append(toIndentedString(baseType)).append("\n");
        sb.append("    schemaLocation: ").append(toIndentedString(schemaLocation)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    completionDate: ").append(toIndentedString(completionDate)).append("\n");
        sb.append("    expectedCompletionDate: ").append(toIndentedString(expectedCompletionDate)).append("\n");
        sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    note: ").append(toIndentedString(note)).append("\n");
        sb.append("    orderItem: ").append(toIndentedString(orderItem)).append("\n");
        sb.append("    orderMessage: ").append(toIndentedString(orderMessage)).append("\n");
        sb.append("    orderVersion: ").append(toIndentedString(orderVersion)).append("\n");
        sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
        sb.append("    relatedParty: ").append(toIndentedString(relatedParty)).append("\n");
        sb.append("    requestedCompletionDate: ").append(toIndentedString(requestedCompletionDate)).append("\n");
        sb.append("    requestedStartDate: ").append(toIndentedString(requestedStartDate)).append("\n");
        sb.append("    state: ").append(toIndentedString(state)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

