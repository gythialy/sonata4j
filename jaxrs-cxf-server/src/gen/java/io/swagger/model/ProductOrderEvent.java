package io.swagger.model;

import io.swagger.annotations.ApiModel;
import io.swagger.model.Note;
import io.swagger.model.OrderItemEvent;
import io.swagger.model.OrderMessage;
import io.swagger.model.ProductOrderStateType;
import io.swagger.model.RelatedParty;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;

import io.swagger.annotations.ApiModelProperty;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
  * ProductOrder structure used for notification
 **/
@ApiModel(description="ProductOrder structure used for notification")
public class ProductOrderEvent  {
  
  @ApiModelProperty(value = "")
  private String baseType = null;

  @ApiModelProperty(value = "")
  private String schemaLocation = null;

  @ApiModelProperty(value = "")
  private String type = null;

  @ApiModelProperty(value = "The date the order is completed. Format is YYYY-MM-DDThh:mmTZD (e.g. 1997-07-16T19:20+01:00)")
 /**
   * The date the order is completed. Format is YYYY-MM-DDThh:mmTZD (e.g. 1997-07-16T19:20+01:00)
  **/
  private Date completionDate = null;

  @ApiModelProperty(value = "Expected delivery date amended by the provider")
 /**
   * Expected delivery date amended by the provider
  **/
  private Date expectedCompletionDate = null;

  @ApiModelProperty(required = true, value = "A number that uniquely identifies an order within the buyer's enterprise.")
 /**
   * A number that uniquely identifies an order within the buyer's enterprise.
  **/
  private String externalId = null;

  @ApiModelProperty(required = true, value = "Unique (within the ordering domain) identifier for the order that is generated by the seller when the order is initially accepted.")
 /**
   * Unique (within the ordering domain) identifier for the order that is generated by the seller when the order is initially accepted.
  **/
  private String id = null;

  @ApiModelProperty(value = "")
  @Valid
  private List<Note> note = null;

  @ApiModelProperty(required = true, value = "")
  @Valid
  private List<OrderItemEvent> orderItem = new ArrayList<OrderItemEvent>();

  @ApiModelProperty(value = "")
  @Valid
  private List<OrderMessage> orderMessage = null;

  @ApiModelProperty(required = true, value = "The version number that the Buyer uses to refer to this particular version of the order")
 /**
   * The version number that the Buyer uses to refer to this particular version of the order
  **/
  private String orderVersion = "1";

  @ApiModelProperty(value = "An identifier that is used to group Orders that represent a unit of functionality that is important to a Buyer.  A Project can be used to relate multiple Orders together.")
 /**
   * An identifier that is used to group Orders that represent a unit of functionality that is important to a Buyer.  A Project can be used to relate multiple Orders together.
  **/
  private String projectId = null;

  @ApiModelProperty(required = true, value = "")
  @Valid
  private List<RelatedParty> relatedParty = new ArrayList<RelatedParty>();

  @ApiModelProperty(required = true, value = "Identifies the buyer's desired due date (requested delivery date). Cannot be requested on cancelled orders.  Format is YYYY-MM-DDThh:mmTZD (e.g. 1997-07-16T19:20+01:00).")
 /**
   * Identifies the buyer's desired due date (requested delivery date). Cannot be requested on cancelled orders.  Format is YYYY-MM-DDThh:mmTZD (e.g. 1997-07-16T19:20+01:00).
  **/
  private Date requestedCompletionDate = null;

  @ApiModelProperty(value = "The buyer's requested date that order processing should start. Format is YYYY-MM-DDThh:mmTZD (e.g. 1997-07-16T19:20+01:00).")
 /**
   * The buyer's requested date that order processing should start. Format is YYYY-MM-DDThh:mmTZD (e.g. 1997-07-16T19:20+01:00).
  **/
  private Date requestedStartDate = null;

  @ApiModelProperty(required = true, value = "")
  @Valid
  private ProductOrderStateType state = null;
 /**
   * Get baseType
   * @return baseType
  **/
  @JsonProperty("@baseType")
  public String getBaseType() {
    return baseType;
  }

  public void setBaseType(String baseType) {
    this.baseType = baseType;
  }

  public ProductOrderEvent baseType(String baseType) {
    this.baseType = baseType;
    return this;
  }

 /**
   * Get schemaLocation
   * @return schemaLocation
  **/
  @JsonProperty("@schemaLocation")
  public String getSchemaLocation() {
    return schemaLocation;
  }

  public void setSchemaLocation(String schemaLocation) {
    this.schemaLocation = schemaLocation;
  }

  public ProductOrderEvent schemaLocation(String schemaLocation) {
    this.schemaLocation = schemaLocation;
    return this;
  }

 /**
   * Get type
   * @return type
  **/
  @JsonProperty("@type")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public ProductOrderEvent type(String type) {
    this.type = type;
    return this;
  }

 /**
   * The date the order is completed. Format is YYYY-MM-DDThh:mmTZD (e.g. 1997-07-16T19:20+01:00)
   * @return completionDate
  **/
  @JsonProperty("completionDate")
  public Date getCompletionDate() {
    return completionDate;
  }

  public void setCompletionDate(Date completionDate) {
    this.completionDate = completionDate;
  }

  public ProductOrderEvent completionDate(Date completionDate) {
    this.completionDate = completionDate;
    return this;
  }

 /**
   * Expected delivery date amended by the provider
   * @return expectedCompletionDate
  **/
  @JsonProperty("expectedCompletionDate")
  public Date getExpectedCompletionDate() {
    return expectedCompletionDate;
  }

  public void setExpectedCompletionDate(Date expectedCompletionDate) {
    this.expectedCompletionDate = expectedCompletionDate;
  }

  public ProductOrderEvent expectedCompletionDate(Date expectedCompletionDate) {
    this.expectedCompletionDate = expectedCompletionDate;
    return this;
  }

 /**
   * A number that uniquely identifies an order within the buyer&#39;s enterprise.
   * @return externalId
  **/
  @JsonProperty("externalId")
  @NotNull
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }

  public ProductOrderEvent externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

 /**
   * Unique (within the ordering domain) identifier for the order that is generated by the seller when the order is initially accepted.
   * @return id
  **/
  @JsonProperty("id")
  @NotNull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ProductOrderEvent id(String id) {
    this.id = id;
    return this;
  }

 /**
   * Get note
   * @return note
  **/
  @JsonProperty("note")
  public List<Note> getNote() {
    return note;
  }

  public void setNote(List<Note> note) {
    this.note = note;
  }

  public ProductOrderEvent note(List<Note> note) {
    this.note = note;
    return this;
  }

  public ProductOrderEvent addNoteItem(Note noteItem) {
    this.note.add(noteItem);
    return this;
  }

 /**
   * Get orderItem
   * @return orderItem
  **/
  @JsonProperty("orderItem")
  @NotNull
  public List<OrderItemEvent> getOrderItem() {
    return orderItem;
  }

  public void setOrderItem(List<OrderItemEvent> orderItem) {
    this.orderItem = orderItem;
  }

  public ProductOrderEvent orderItem(List<OrderItemEvent> orderItem) {
    this.orderItem = orderItem;
    return this;
  }

  public ProductOrderEvent addOrderItemItem(OrderItemEvent orderItemItem) {
    this.orderItem.add(orderItemItem);
    return this;
  }

 /**
   * Get orderMessage
   * @return orderMessage
  **/
  @JsonProperty("orderMessage")
  public List<OrderMessage> getOrderMessage() {
    return orderMessage;
  }

  public void setOrderMessage(List<OrderMessage> orderMessage) {
    this.orderMessage = orderMessage;
  }

  public ProductOrderEvent orderMessage(List<OrderMessage> orderMessage) {
    this.orderMessage = orderMessage;
    return this;
  }

  public ProductOrderEvent addOrderMessageItem(OrderMessage orderMessageItem) {
    this.orderMessage.add(orderMessageItem);
    return this;
  }

 /**
   * The version number that the Buyer uses to refer to this particular version of the order
   * @return orderVersion
  **/
  @JsonProperty("orderVersion")
  @NotNull
  public String getOrderVersion() {
    return orderVersion;
  }

  public void setOrderVersion(String orderVersion) {
    this.orderVersion = orderVersion;
  }

  public ProductOrderEvent orderVersion(String orderVersion) {
    this.orderVersion = orderVersion;
    return this;
  }

 /**
   * An identifier that is used to group Orders that represent a unit of functionality that is important to a Buyer.  A Project can be used to relate multiple Orders together.
   * @return projectId
  **/
  @JsonProperty("projectId")
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }

  public ProductOrderEvent projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

 /**
   * Get relatedParty
   * @return relatedParty
  **/
  @JsonProperty("relatedParty")
  @NotNull
  public List<RelatedParty> getRelatedParty() {
    return relatedParty;
  }

  public void setRelatedParty(List<RelatedParty> relatedParty) {
    this.relatedParty = relatedParty;
  }

  public ProductOrderEvent relatedParty(List<RelatedParty> relatedParty) {
    this.relatedParty = relatedParty;
    return this;
  }

  public ProductOrderEvent addRelatedPartyItem(RelatedParty relatedPartyItem) {
    this.relatedParty.add(relatedPartyItem);
    return this;
  }

 /**
   * Identifies the buyer&#39;s desired due date (requested delivery date). Cannot be requested on cancelled orders.  Format is YYYY-MM-DDThh:mmTZD (e.g. 1997-07-16T19:20+01:00).
   * @return requestedCompletionDate
  **/
  @JsonProperty("requestedCompletionDate")
  @NotNull
  public Date getRequestedCompletionDate() {
    return requestedCompletionDate;
  }

  public void setRequestedCompletionDate(Date requestedCompletionDate) {
    this.requestedCompletionDate = requestedCompletionDate;
  }

  public ProductOrderEvent requestedCompletionDate(Date requestedCompletionDate) {
    this.requestedCompletionDate = requestedCompletionDate;
    return this;
  }

 /**
   * The buyer&#39;s requested date that order processing should start. Format is YYYY-MM-DDThh:mmTZD (e.g. 1997-07-16T19:20+01:00).
   * @return requestedStartDate
  **/
  @JsonProperty("requestedStartDate")
  public Date getRequestedStartDate() {
    return requestedStartDate;
  }

  public void setRequestedStartDate(Date requestedStartDate) {
    this.requestedStartDate = requestedStartDate;
  }

  public ProductOrderEvent requestedStartDate(Date requestedStartDate) {
    this.requestedStartDate = requestedStartDate;
    return this;
  }

 /**
   * Get state
   * @return state
  **/
  @JsonProperty("state")
  @NotNull
  public ProductOrderStateType getState() {
    return state;
  }

  public void setState(ProductOrderStateType state) {
    this.state = state;
  }

  public ProductOrderEvent state(ProductOrderStateType state) {
    this.state = state;
    return this;
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductOrderEvent {\n");
    
    sb.append("    baseType: ").append(toIndentedString(baseType)).append("\n");
    sb.append("    schemaLocation: ").append(toIndentedString(schemaLocation)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    completionDate: ").append(toIndentedString(completionDate)).append("\n");
    sb.append("    expectedCompletionDate: ").append(toIndentedString(expectedCompletionDate)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    orderItem: ").append(toIndentedString(orderItem)).append("\n");
    sb.append("    orderMessage: ").append(toIndentedString(orderMessage)).append("\n");
    sb.append("    orderVersion: ").append(toIndentedString(orderVersion)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    relatedParty: ").append(toIndentedString(relatedParty)).append("\n");
    sb.append("    requestedCompletionDate: ").append(toIndentedString(requestedCompletionDate)).append("\n");
    sb.append("    requestedStartDate: ").append(toIndentedString(requestedStartDate)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

