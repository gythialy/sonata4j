/**
 * MEF LSO Sonata
 *  A set of APIs based on the LSO Reference Architecture for Serviceability (Address Validation, Site Queries, Product Offering Qualification) | Quoting | Product Inventory | Ordering | Trouble-ticketing Billing | Contract & Catalog  
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.api;

import io.swagger.model.ChangeQuoteStateResponse;
import io.swagger.model.ChangelQuoteStateRequest;
import java.util.Date;
import io.swagger.model.ErrorRepresentation;
import io.swagger.model.Quote;
import io.swagger.model.QuoteCreate;
import io.swagger.model.QuoteFind;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * MEF LSO Sonata
 *
 * <p> A set of APIs based on the LSO Reference Architecture for Serviceability (Address Validation, Site Queries, Product Offering Qualification) | Quoting | Product Inventory | Ordering | Trouble-ticketing Billing | Contract & Catalog  
 *
 * API tests for QuoteApi 
 */
public class QuoteApiTest {


    private QuoteApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("https://serverRoot/api/mef", QuoteApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    
    /**
     * Create a quote
     *
     * This operation is used to create a new quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quoteCreateTest() {
        QuoteCreate quote = null;
        //Quote response = api.quoteCreate(quote);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * List quotes
     *
     * This operation is used to retrieve quote information using filter criteria.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quoteFindTest() {
        String externalId = null;
        String state = null;
        String quoteLevel = null;
        String projectId = null;
        Date quoteDateGt = null;
        Date quoteDateLt = null;
        Date quoteCompletionDateGt = null;
        Date quoteCompletionDateLt = null;
        String offset = null;
        String limit = null;
        //List<QuoteFind> response = api.quoteFind(externalId, state, quoteLevel, projectId, quoteDateGt, quoteDateLt, quoteCompletionDateGt, quoteCompletionDateLt, offset, limit);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Retrieve a quote
     *
     * This operation is used to retrieve quote information using the ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quoteGetTest() {
        String id = null;
        //Quote response = api.quoteGet(id);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * request a quote state change
     *
     * Request from buyer to cancel or reject a quote. When seller receive cancel request, seller will shift quote state to CANCELLED (no change on order item state) When seller receive reject request, seller will shift quote state to REJECTED (no change on order item state)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quoteRequestStateChangeTest() {
        ChangelQuoteStateRequest changeQuoteStateRequest = null;
        //ChangeQuoteStateResponse response = api.quoteRequestStateChange(changeQuoteStateRequest);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
}
