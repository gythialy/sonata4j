/**
 * MEF LSO Sonata
 *  A set of APIs based on the LSO Reference Architecture for Serviceability (Address Validation, Site Queries, Product Offering Qualification) | Quoting | Product Inventory | Ordering | Trouble-ticketing Billing | Contract & Catalog  
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.api;

import io.swagger.model.ErrorRepresentation;
import io.swagger.model.Hub;
import io.swagger.model.HubInput;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * MEF LSO Sonata
 *
 * <p> A set of APIs based on the LSO Reference Architecture for Serviceability (Address Validation, Site Queries, Product Offering Qualification) | Quoting | Product Inventory | Ordering | Trouble-ticketing Billing | Contract & Catalog  
 *
 * API tests for HubApi 
 */
public class HubApiTest {


    private HubApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("https://serverRoot/api/mef", HubApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    
    /**
     * hubDelete
     *
     * This operation is used to delete a hub.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productOfferingQualificationManagementHubDeleteTest() {
        String hubId = null;
        //api.productOfferingQualificationManagementHubDelete(hubId);
        
        // TODO: test validations
        
        
    }
    
    /**
     * hubFind
     *
     * This operation retrieves a set of hubs.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productOfferingQualificationManagementHubGetTest() {
        //List<Hub> response = api.productOfferingQualificationManagementHubGet();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * hubCreate
     *
     * A request initiated by the Buyer to instruct the Seller to send notifications of POQ state changes in the event the Seller uses the Deferred Response pattern to respond to a Create Product Offering Qualifica-tion request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productOfferingQualificationManagementHubPostTest() {
        HubInput hub = null;
        //Hub response = api.productOfferingQualificationManagementHubPost(hub);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Create a Hub
     *
     * Structure used to create a hub (to subscribe to notification)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productOrderManagementHubCreateTest() {
        HubInput hub = null;
        //Hub response = api.productOrderManagementHubCreate(hub);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Delete a Hub
     *
     * Delete Hub
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productOrderManagementHubDeleteTest() {
        String hubId = null;
        //api.productOrderManagementHubDelete(hubId);
        
        // TODO: test validations
        
        
    }
    
    /**
     * Find a list of Hub
     *
     * Find Hub
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productOrderManagementHubFindTest() {
        //List<Hub> response = api.productOrderManagementHubFind();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Register a listener
     *
     * Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quoteManagementHubCreateTest() {
        HubInput hub = null;
        //Hub response = api.quoteManagementHubCreate(hub);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Unregister a listener
     *
     * Clears the communication endpoint address that was set by creating the Hub
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quoteManagementHubDeleteTest() {
        String hubId = null;
        //api.quoteManagementHubDelete(hubId);
        
        // TODO: test validations
        
        
    }
    
    /**
     * listHub
     *
     * Retrieve hub(s)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quoteManagementHubFindTest() {
        String fields = null;
        //List<Hub> response = api.quoteManagementHubFind(fields);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
}
