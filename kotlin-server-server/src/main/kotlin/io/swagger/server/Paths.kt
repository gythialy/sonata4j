/**
 * MEF LSO Sonata
 *  A set of APIs based on the LSO Reference Architecture for Serviceability (Address Validation, Site Queries, Product Offering Qualification) | Quoting | Product Inventory | Ordering | Trouble-ticketing Billing | Contract & Catalog
 *
 * OpenAPI spec version: 3.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.server

import io.ktor.application.ApplicationCall
import io.ktor.http.HttpMethod
import io.ktor.locations.Location
import io.ktor.locations.handle
import io.ktor.locations.location
import io.ktor.pipeline.PipelineContext
import io.ktor.routing.Route
import io.ktor.routing.method


// NOTE: ktor-location@0.9.0 is missing extension for Route.delete. This includes it.
inline fun <reified T : Any> Route.delete(noinline body: suspend PipelineContext<Unit, ApplicationCall>.(T) -> Unit): Route {
    return location(T::class) {
        method(HttpMethod.Delete) {
            handle(body)
        }
    }
}

object Paths {
    /**
     * Find a lost of product order cancellation request(s)
     * This operation allows buyer to retrieve a list of product order cancellation request
     * @param productOrderId  (optional)
     * @param productOrderExternalId  (optional)
     */
    @Location("/productOrderManagement/v3/cancelProductOrder")
    class cancelProductOrderFind(val productOrderId: String, val productOrderExternalId: String)

    /**
     * Get a product order cancellation request (by id)
     * This operation allows buyer to retrieve one product order cancellation request
     * @param cancelProductOrderId
     */
    @Location("/productOrderManagement/v3/cancelProductOrder/{CancelProductOrderId}")
    class cancelProductOrderGet(val cancelProductOrderId: String)

    /**
     * retrieveAddress
     * The Buyer requests the full details of a single Address based on an Address identifier that was previously provided by the Seller.
     * @param geographicAddressId
     */
    @Location("/geographicAddressManagement/v3/geographicAddress/{GeographicAddressId}")
    class geographicAddressGet(val geographicAddressId: String)

    /**
     * retrieveGeographicSites
     * The Buyer requests that the Seller provides a list of Service Sites known to the Seller based on a set of Site/Address filter criteria.  For each Service Site returned, the Seller also provides a Service Site Identifier, which uniquely identifies this Service Site within the Seller.
     * @param status Status of the site (optional)
     * @param siteCompanyName The name of the company that is the administrative authority (e.g. controls access) for this Service Site. (For example, the building owner) (optional)
     * @param siteCustomerName The name of the company that is the administrative authority for the space within this Service Site. (For example, the company leasing space in a multi-tenant building). (optional)
     * @param siteDescription A textual description of the Service Site. (optional)
     * @param siteType This defines whether a Service Site is public or private. (optional)
     * @param siteName A name commonly used by people to refer to this Service Site. (optional)
     * @param siteContactName Identifies the name of the person or organization at the specific site location that is the local contact. This contact will primarily be used for gaining access to the site. Filtering is done on the name of the relatedParty which has role ‘Site Contact’ in the Site record. (optional)
     * @param geographicAddress.id Identifier of a geographic address (from the seller). It could be any type of address reference (fielded, formatted, referenced, geoCode) (optional)
     * @param geographicAddress.streetNr Street Nr of the geographic site address (optional)
     * @param geographicAddress.streetName Street Name of the geographic site address (optional)
     * @param geographicAddress.streetType Street Type of the geographic site address (optional)
     * @param geographicAddress.city City of the geographic site address (optional)
     * @param geographicAddress.postcode Postcode of the geographic site address (optional)
     * @param geographicAddress.country Country of the geographic site address (optional)
     */
    @Location("/geographicSiteManagement/v3/geographicSite")
    class geographicSiteFind(val status: String, val siteCompanyName: String, val siteCustomerName: String, val siteDescription: String, val siteType: String, val siteName: String, val siteContactName: String, val id: String, val streetNr: String, val streetName: String, val streetType: String, val city: String, val postcode: String, val country: String)

    /**
     * retrieveSite
     * The Buyer requests the full details for a single Service Site based on a Service Site identifier that was previously provided by the Seller.
     * @param siteId
     */
    @Location("/geographicSiteManagement/v3/geographicSite/{SiteId}")
    class geographicSiteGet(val siteId: String)

    /**
     * hubDelete
     * This operation is used to delete a hub.
     * @param hubId
     */
    @Location("/productOfferingQualificationManagement/v3/hub/{HubId}")
    class productOfferingQualificationManagementHubDelete(val hubId: String)

    /**
     * hubFind
     * This operation retrieves a set of hubs.
     */
    @Location("/productOfferingQualificationManagement/v3/hub")
    class productOfferingQualificationManagementHubGet()

    /**
     * Delete a Hub
     * Delete Hub
     * @param hubId
     */
    @Location("/productOrderManagement/v3/hub/{HubId}")
    class productOrderManagementHubDelete(val hubId: String)

    /**
     * Find a list of Hub
     * Find Hub
     */
    @Location("/productOrderManagement/v3/hub")
    class productOrderManagementHubFind()

    /**
     * Unregister a listener
     * Clears the communication endpoint address that was set by creating the Hub
     * @param hubId
     */
    @Location("/quoteManagement/v2/hub/{HubId}")
    class quoteManagementHubDelete(val hubId: String)

    /**
     * listHub
     * Retrieve hub(s)
     * @param fields  (optional)
     */
    @Location("/quoteManagement/v2/hub")
    class quoteManagementHubFind(val fields: String)

    /**
     * productFind (list) - retrieve product list with summary view
     * The Buyer requests a list of Products from the Seller based on filter criteria.
     * @param buyerId Identifier of the party who role is buyer. (optional)
     * @param status The status of the product (optional)
     * @param productSpecificationId A reference to a product spec by id (optional)
     * @param productOfferingId A reference to a product offering by id (optional)
     * @param buyerProductId A reference to the buyerProductId provided in the order (optional)
     * @param geographicalSiteId A site identifier which is associated to the product (optional)
     * @param relatedProductId This criteria allows to retrieve all Product records with a Product Relationship to a specified Product. E.g. All Products related to Product with ID 5 (optional)
     * @param billingAccountId The Billing Account associated with the Product. (optional)
     * @param productOrderId Identifies Product Order(s) associated with the Product (optional)
     * @param startDate.lt Less than the date that is the initial install date for the Product (optional)
     * @param startDate.gt Greater than the date that is the initial install date for the Product (optional)
     * @param lastUpdateDate.lt Less than date that the last change affecting this Product was completed (optional)
     * @param lastUpdateDate.gt Greater than the date that the last change affecting this Product was complet-ed (optional)
     * @param offset Requested index for start of resources to be provided in response requested by client (optional)
     * @param limit Requested number of resources to be provided in response requested by client (optional)
     */
    @Location("/productInventoryManagement/v3/product")
    class productFind(val buyerId: String, val status: String, val productSpecificationId: String, val productOfferingId: String, val buyerProductId: String, val geographicalSiteId: String, val relatedProductId: String, val billingAccountId: String, val productOrderId: String, val startDateLt: java.time.LocalDateTime, val startDateGt: java.time.LocalDateTime, val lastUpdateDateLt: java.time.LocalDateTime, val lastUpdateDateGt: java.time.LocalDateTime, val offset: String, val limit: String)

    /**
     * productGet (by id) - retrieve one product with all information
     * The Buyer requests the details associated with a single Product based on a Seller Product Identifier.
     * @param productId
     */
    @Location("/productInventoryManagement/v3/product/{ProductId}")
    class productGet(val productId: String)

    /**
     * Retrieve a list of ProductOfferingQualifications based on a set of criteria
     * The Buyer requests a list of POQs (in any state) from the Seller based on a set of POQ filter criteria.  For each POQ returned, the Seller also provides a POQ Identifier that uniquely identifies this POQ within the Seller.
     * @param state State of the POQ to be retrieeved (optional)
     * @param projectId Identifier of buyer project associated to POQ (optional)
     * @param requestedResponseDate.gt POQ expected response date is after this date (optional)
     * @param requestedResponseDate.lt POQ expected response date is before this date (optional)
     * @param offset Requested index for start of resources to be provided in response requested by client (optional)
     * @param limit Requested number of resources to be provided in response requested by client (optional)
     */
    @Location("/productOfferingQualificationManagement/v3/productOfferingQualification")
    class productOfferingQualificationFind(val state: String, val projectId: String, val requestedResponseDateGt: java.time.LocalDateTime, val requestedResponseDateLt: java.time.LocalDateTime, val offset: String, val limit: String)

    /**
     * Get a ProductOfferingQualification based on its id
     * The Buyer requests the full details of a single Product Offering Qualification based on a POQ identifier.
     * @param productOfferingQualificationId
     */
    @Location("/productOfferingQualificationManagement/v3/productOfferingQualification/{ProductOfferingQualificationId}")
    class productOfferingQualificationGet(val productOfferingQualificationId: String)

    /**
     * Find a list of product order(s)
     * This operation is used to retrieve one or more product orders based upon filter criteria specified on input.
     * @param buyerId A Party Role played by an Individual or an Organization that buys products and services from a Seller. Specifically, the ID of the Service Provider (Buyer) organization placing the order. (optional)
     * @param sellerId A Party Role played by an organization that provides products and services to a Buyer. Specifically, the ID of the Partner/Access Provider (Seller) organization receiving the order. (optional)
     * @param state The status of the order (optional)
     * @param buyerRequestedDate.gt Buyer requested date greater than (optional)
     * @param buyerRequestedDate.lt Buyer requested date lesser than (optional)
     * @param orderDate.gt Date when the order was created greater than (optional)
     * @param orderDate.lt Date when the order was created lesser than (optional)
     * @param requestedStartDate.gt Buyer requested start date greater than (optional)
     * @param requestedStartDate.lt Buyer requested start date lesser than (optional)
     * @param requestedCompletionDate.gt Identifies the Buyer&#39;s desired due date (requested delivery date) greater than (optional)
     * @param requestedCompletionDate.lt Identifies the Buyer&#39;s desired due date (requested delivery date) lesser than (optional)
     * @param expectedCompletionDate.gt Seller planned completion date greater than (optional)
     * @param expectedCompletionDate.lt Seller planned completion date lesser than (optional)
     * @param completionDate.gt Effective completion date greater than (optional)
     * @param completionDate.lt Effective completion date lesser than (optional)
     * @param orderCancellationDate.gt order cancellation date greater than (optional)
     * @param orderCancellationDate.lt order cancellation date lesser than (optional)
     * @param siteName A name by which the site is known. (optional)
     * @param siteCompanyName The name of the company that is located at the service location.  This may be different from the name of the Buyer that ordered services at that site. (optional)
     * @param siteCustomerName The customer name at a site where the service is being delivered (optional)
     * @param projectId An identifier that is used to group Orders that represent a unit of functionality that is important to a Buyer. (optional)
     * @param externalId A number that uniquely identifies an order within the Buyer&#39;s enterprise. (optional)
     * @param offset Requested index for start of resources to be provided in response requested by client (optional)
     * @param limit Requested number of resources to be provided in response requested by client (optional)
     */
    @Location("/productOrderManagement/v3/productOrder")
    class productOrderFind(val buyerId: String, val sellerId: String, val state: String, val buyerRequestedDateGt: java.time.LocalDateTime, val buyerRequestedDateLt: java.time.LocalDateTime, val orderDateGt: java.time.LocalDateTime, val orderDateLt: java.time.LocalDateTime, val requestedStartDateGt: java.time.LocalDateTime, val requestedStartDateLt: java.time.LocalDateTime, val requestedCompletionDateGt: java.time.LocalDateTime, val requestedCompletionDateLt: java.time.LocalDateTime, val expectedCompletionDateGt: java.time.LocalDateTime, val expectedCompletionDateLt: java.time.LocalDateTime, val completionDateGt: java.time.LocalDateTime, val completionDateLt: java.time.LocalDateTime, val orderCancellationDateGt: java.time.LocalDateTime, val orderCancellationDateLt: java.time.LocalDateTime, val siteName: String, val siteCompanyName: String, val siteCustomerName: String, val projectId: String, val externalId: String, val offset: String, val limit: String)

    /**
     * Get a product order (by id)
     * This operation is used to retrieve a single product order based upon a specified product order id.
     * @param productOrderId
     */
    @Location("/productOrderManagement/v3/productOrder/{ProductOrderId}")
    class productOrderGet(val productOrderId: String)

    /**
     * List quotes
     * This operation is used to retrieve quote information using filter criteria.
     * @param externalId ID given by the consumer and only understandable by him (to facilitate his searches afterwards) (optional)
     * @param state State of the Quote (optional)
     * @param quoteLevel Level of the quote - could be indicative, budgetary or firm (optional)
     * @param projectId This value MAY be assigned by the Buyer/Seller to identify a project the quoting request is associated with. (optional)
     * @param quoteDate.gt Date when the quote was created - greater than (optional)
     * @param quoteDate.lt Date when the quote was created - lower than (optional)
     * @param quoteCompletionDate.gt Date when the quote was completed -  greater than (optional)
     * @param quoteCompletionDate.lt Date when the quote was completed -  lower than (optional)
     * @param offset Requested index for start of resources to be provided in response requested by client (optional)
     * @param limit Requested number of resources to be provided in response requested by client (optional)
     */
    @Location("/quoteManagement/v2/quote")
    class quoteFind(val externalId: String, val state: String, val quoteLevel: String, val projectId: String, val quoteDateGt: java.time.LocalDateTime, val quoteDateLt: java.time.LocalDateTime, val quoteCompletionDateGt: java.time.LocalDateTime, val quoteCompletionDateLt: java.time.LocalDateTime, val offset: String, val limit: String)

    /**
     * Retrieve a quote
     * This operation is used to retrieve quote information using the ID.
     * @param id
     */
    @Location("/quoteManagement/v2/quote/{id}")
    class quoteGet(val id: String)

}
