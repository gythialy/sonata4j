/**
 * MEF LSO Sonata
 *  A set of APIs based on the LSO Reference Architecture for Serviceability (Address Validation, Site Queries, Product Offering Qualification) | Quoting | Product Inventory | Ordering | Trouble-ticketing Billing | Contract & Catalog
 *
 * OpenAPI spec version: 3.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.server.apis

// ktor 0.9.x is missing io.ktor.locations.DELETE, this adds it.
// see https://github.com/ktorio/ktor/issues/288

import com.google.gson.Gson
import io.ktor.application.call
import io.ktor.auth.OAuthAccessTokenResponse
import io.ktor.auth.authentication
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.locations.get
import io.ktor.locations.oauthAtLocation
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.Route
import io.ktor.routing.application
import io.swagger.server.ApplicationAuthProviders
import io.swagger.server.ApplicationExecutors
import io.swagger.server.HTTP.client
import io.swagger.server.Paths
import kotlinx.coroutines.experimental.asCoroutineDispatcher

fun Route.ProductApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    get<Paths.productFind> { it: Paths.productFind ->
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()

        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val exampleContentType = "application/json;charset=utf-8"
            val exampleContentString = """[ {
              "productSpecification" : {
                "id" : "id"
              },
              "productOffering" : {
                "id" : "id"
              },
              "buyerProductId" : "buyerProductId",
              "href" : "href",
              "id" : "id",
              "startDate" : "2000-01-23T04:56:07.000+00:00",
              "status" : { }
            }, {
              "productSpecification" : {
                "id" : "id"
              },
              "productOffering" : {
                "id" : "id"
              },
              "buyerProductId" : "buyerProductId",
              "href" : "href",
              "id" : "id",
              "startDate" : "2000-01-23T04:56:07.000+00:00",
              "status" : { }
            } ]"""

            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        }
    }
            .apply {
                // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
                //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

                try {
                    authentication {
                        oauthAtLocation<Paths.productFind>(client, ApplicationExecutors.asCoroutineDispatcher(),
                                providerLookup = { ApplicationAuthProviders["bearer"] },
                                urlProvider = { currentLocation, provider ->
                                    // TODO: define a callback url here.
                                    "/"
                                })
                    }
                } catch (e: io.ktor.application.DuplicateApplicationFeatureException) {
                    application.environment.log.warn("authentication block for '/productInventoryManagement/v3/product' is duplicated in code. " +
                            "Generated endpoints may need to be merged under a 'route' entry.")
                }
            }

    get<Paths.productGet> { it: Paths.productGet ->
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()

        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val exampleContentType = "application/json;charset=utf-8"
            val exampleContentString = """{
              "productSpecification" : {
                "describing" : {
                  "@type" : "@type",
                  "@schemaLocation" : "@schemaLocation"
                },
                "id" : "id"
              },
              "agreement" : [ {
                "path" : "path",
                "name" : "name",
                "id" : "id"
              }, {
                "path" : "path",
                "name" : "name",
                "id" : "id"
              } ],
              "productOffering" : {
                "id" : "id"
              },
              "@type" : "@type",
              "lastUpdateDate" : "2000-01-23T04:56:07.000+00:00",
              "productOrder" : [ {
                "orderItemId" : "orderItemId",
                "href" : "href",
                "id" : "id"
              }, {
                "orderItemId" : "orderItemId",
                "href" : "href",
                "id" : "id"
              } ],
              "billingAccount" : [ {
                "id" : "id"
              }, {
                "id" : "id"
              } ],
              "productTerm" : [ {
                "duration" : {
                  "amount" : 1.4658129,
                  "units" : "units"
                },
                "validFor" : {
                  "startDateTime" : "2000-01-23T04:56:07.000+00:00",
                  "endDateTime" : "2000-01-23T04:56:07.000+00:00"
                },
                "name" : "name",
                "description" : "description"
              }, {
                "duration" : {
                  "amount" : 1.4658129,
                  "units" : "units"
                },
                "validFor" : {
                  "startDateTime" : "2000-01-23T04:56:07.000+00:00",
                  "endDateTime" : "2000-01-23T04:56:07.000+00:00"
                },
                "name" : "name",
                "description" : "description"
              } ],
              "relatedParty" : [ {
                "number" : "number",
                "@referredType" : "@referredType",
                "emailAddress" : "emailAddress",
                "role" : [ "role", "role" ],
                "name" : "name",
                "numberExtension" : "numberExtension",
                "id" : "id"
              }, {
                "number" : "number",
                "@referredType" : "@referredType",
                "emailAddress" : "emailAddress",
                "role" : [ "role", "role" ],
                "name" : "name",
                "numberExtension" : "numberExtension",
                "id" : "id"
              } ],
              "terminationDate" : "2000-01-23T04:56:07.000+00:00",
              "site" : [ {
                "geographicLocation" : {
                  "spatialRef" : "spatialRef",
                  "geographicPoint" : [ {
                    "latitude" : "latitude",
                    "id" : "id",
                    "longitude" : "longitude"
                  }, {
                    "latitude" : "latitude",
                    "id" : "id",
                    "longitude" : "longitude"
                  } ],
                  "id" : "id"
                },
                "referencedAddress" : {
                  "referenceType" : "referenceType",
                  "id" : "id",
                  "referenceId" : "referenceId"
                },
                "@type" : "@type",
                "description" : "description",
                "siteName" : "siteName",
                "relatedParty" : [ {
                  "number" : "number",
                  "@referredType" : "@referredType",
                  "emailAddress" : "emailAddress",
                  "role" : [ "role", "role" ],
                  "name" : "name",
                  "numberExtension" : "numberExtension",
                  "id" : "id"
                }, {
                  "number" : "number",
                  "@referredType" : "@referredType",
                  "emailAddress" : "emailAddress",
                  "role" : [ "role", "role" ],
                  "name" : "name",
                  "numberExtension" : "numberExtension",
                  "id" : "id"
                } ],
                "additionnalSiteInformation" : "additionnalSiteInformation",
                "siteCompanyName" : "siteCompanyName",
                "fieldedAddress" : {
                  "country" : "country",
                  "postCodeExtension" : "postCodeExtension",
                  "streetType" : "streetType",
                  "city" : "city",
                  "streetNr" : "streetNr",
                  "locality" : "locality",
                  "postcode" : "postcode",
                  "streetNrLast" : "streetNrLast",
                  "streetNrSuffix" : "streetNrSuffix",
                  "streetName" : "streetName",
                  "stateOrProvince" : "stateOrProvince",
                  "streetNrLastSuffix" : "streetNrLastSuffix",
                  "geographicSubAddress" : [ {
                    "buildingName" : "buildingName",
                    "subUnit" : [ {
                      "subUnitType" : "subUnitType",
                      "subUnitIdentifier" : "subUnitIdentifier"
                    }, {
                      "subUnitType" : "subUnitType",
                      "subUnitIdentifier" : "subUnitIdentifier"
                    } ],
                    "@type" : "@type",
                    "levelType" : "levelType",
                    "levelNumber" : "levelNumber",
                    "id" : "id",
                    "@schemaLocation" : "@schemaLocation",
                    "privateStreetNumber" : "privateStreetNumber",
                    "privateStreetName" : "privateStreetName"
                  }, {
                    "buildingName" : "buildingName",
                    "subUnit" : [ {
                      "subUnitType" : "subUnitType",
                      "subUnitIdentifier" : "subUnitIdentifier"
                    }, {
                      "subUnitType" : "subUnitType",
                      "subUnitIdentifier" : "subUnitIdentifier"
                    } ],
                    "@type" : "@type",
                    "levelType" : "levelType",
                    "levelNumber" : "levelNumber",
                    "id" : "id",
                    "@schemaLocation" : "@schemaLocation",
                    "privateStreetNumber" : "privateStreetNumber",
                    "privateStreetName" : "privateStreetName"
                  } ],
                  "streetSuffix" : "streetSuffix",
                  "id" : "id"
                },
                "siteCustomerName" : "siteCustomerName",
                "formattedAdress" : {
                  "country" : "country",
                  "postCodeExtension" : "postCodeExtension",
                  "stateOrProvince" : "stateOrProvince",
                  "city" : "city",
                  "addrLine2" : "addrLine2",
                  "addrLine1" : "addrLine1",
                  "locality" : "locality",
                  "postcode" : "postcode",
                  "id" : "id"
                },
                "id" : "id",
                "@schemaLocation" : "@schemaLocation",
                "siteType" : "siteType",
                "status" : { }
              }, {
                "geographicLocation" : {
                  "spatialRef" : "spatialRef",
                  "geographicPoint" : [ {
                    "latitude" : "latitude",
                    "id" : "id",
                    "longitude" : "longitude"
                  }, {
                    "latitude" : "latitude",
                    "id" : "id",
                    "longitude" : "longitude"
                  } ],
                  "id" : "id"
                },
                "referencedAddress" : {
                  "referenceType" : "referenceType",
                  "id" : "id",
                  "referenceId" : "referenceId"
                },
                "@type" : "@type",
                "description" : "description",
                "siteName" : "siteName",
                "relatedParty" : [ {
                  "number" : "number",
                  "@referredType" : "@referredType",
                  "emailAddress" : "emailAddress",
                  "role" : [ "role", "role" ],
                  "name" : "name",
                  "numberExtension" : "numberExtension",
                  "id" : "id"
                }, {
                  "number" : "number",
                  "@referredType" : "@referredType",
                  "emailAddress" : "emailAddress",
                  "role" : [ "role", "role" ],
                  "name" : "name",
                  "numberExtension" : "numberExtension",
                  "id" : "id"
                } ],
                "additionnalSiteInformation" : "additionnalSiteInformation",
                "siteCompanyName" : "siteCompanyName",
                "fieldedAddress" : {
                  "country" : "country",
                  "postCodeExtension" : "postCodeExtension",
                  "streetType" : "streetType",
                  "city" : "city",
                  "streetNr" : "streetNr",
                  "locality" : "locality",
                  "postcode" : "postcode",
                  "streetNrLast" : "streetNrLast",
                  "streetNrSuffix" : "streetNrSuffix",
                  "streetName" : "streetName",
                  "stateOrProvince" : "stateOrProvince",
                  "streetNrLastSuffix" : "streetNrLastSuffix",
                  "geographicSubAddress" : [ {
                    "buildingName" : "buildingName",
                    "subUnit" : [ {
                      "subUnitType" : "subUnitType",
                      "subUnitIdentifier" : "subUnitIdentifier"
                    }, {
                      "subUnitType" : "subUnitType",
                      "subUnitIdentifier" : "subUnitIdentifier"
                    } ],
                    "@type" : "@type",
                    "levelType" : "levelType",
                    "levelNumber" : "levelNumber",
                    "id" : "id",
                    "@schemaLocation" : "@schemaLocation",
                    "privateStreetNumber" : "privateStreetNumber",
                    "privateStreetName" : "privateStreetName"
                  }, {
                    "buildingName" : "buildingName",
                    "subUnit" : [ {
                      "subUnitType" : "subUnitType",
                      "subUnitIdentifier" : "subUnitIdentifier"
                    }, {
                      "subUnitType" : "subUnitType",
                      "subUnitIdentifier" : "subUnitIdentifier"
                    } ],
                    "@type" : "@type",
                    "levelType" : "levelType",
                    "levelNumber" : "levelNumber",
                    "id" : "id",
                    "@schemaLocation" : "@schemaLocation",
                    "privateStreetNumber" : "privateStreetNumber",
                    "privateStreetName" : "privateStreetName"
                  } ],
                  "streetSuffix" : "streetSuffix",
                  "id" : "id"
                },
                "siteCustomerName" : "siteCustomerName",
                "formattedAdress" : {
                  "country" : "country",
                  "postCodeExtension" : "postCodeExtension",
                  "stateOrProvince" : "stateOrProvince",
                  "city" : "city",
                  "addrLine2" : "addrLine2",
                  "addrLine1" : "addrLine1",
                  "locality" : "locality",
                  "postcode" : "postcode",
                  "id" : "id"
                },
                "id" : "id",
                "@schemaLocation" : "@schemaLocation",
                "siteType" : "siteType",
                "status" : { }
              } ],
              "@baseType" : "@baseType",
              "statusChange" : [ {
                "changeReason" : "changeReason",
                "changeDate" : "2000-01-23T04:56:07.000+00:00"
              }, {
                "changeReason" : "changeReason",
                "changeDate" : "2000-01-23T04:56:07.000+00:00"
              } ],
              "buyerProductId" : "buyerProductId",
              "productRelationship" : [ {
                "product" : {
                  "buyerProductId" : "buyerProductId",
                  "href" : "href",
                  "id" : "id"
                },
                "type" : "type"
              }, {
                "product" : {
                  "buyerProductId" : "buyerProductId",
                  "href" : "href",
                  "id" : "id"
                },
                "type" : "type"
              } ],
              "href" : "href",
              "id" : "id",
              "@schemaLocation" : "@schemaLocation",
              "productPrice" : [ {
                "unitOfMeasure" : "unitOfMeasure",
                "@type" : "@type",
                "price" : {
                  "taxRate" : 6.0274563,
                  "@type" : "@type",
                  "taxIncludedAmount" : {
                    "unit" : "unit",
                    "value" : 0.8008282
                  },
                  "dutyFreeAmount" : {
                    "unit" : "unit",
                    "value" : 0.8008282
                  }
                },
                "name" : "name",
                "priceType" : { },
                "description" : "description",
                "recurringChargePeriod" : { }
              }, {
                "unitOfMeasure" : "unitOfMeasure",
                "@type" : "@type",
                "price" : {
                  "taxRate" : 6.0274563,
                  "@type" : "@type",
                  "taxIncludedAmount" : {
                    "unit" : "unit",
                    "value" : 0.8008282
                  },
                  "dutyFreeAmount" : {
                    "unit" : "unit",
                    "value" : 0.8008282
                  }
                },
                "name" : "name",
                "priceType" : { },
                "description" : "description",
                "recurringChargePeriod" : { }
              } ],
              "startDate" : "2000-01-23T04:56:07.000+00:00",
              "status" : { }
            }"""

            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        }
    }
            .apply {
                // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
                //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

                try {
                    authentication {
                        oauthAtLocation<Paths.productGet>(client, ApplicationExecutors.asCoroutineDispatcher(),
                                providerLookup = { ApplicationAuthProviders["bearer"] },
                                urlProvider = { currentLocation, provider ->
                                    // TODO: define a callback url here.
                                    "/"
                                })
                    }
                } catch (e: io.ktor.application.DuplicateApplicationFeatureException) {
                    application.environment.log.warn("authentication block for '/productInventoryManagement/v3/product/{ProductId}' is duplicated in code. " +
                            "Generated endpoints may need to be merged under a 'route' entry.")
                }
            }
}
