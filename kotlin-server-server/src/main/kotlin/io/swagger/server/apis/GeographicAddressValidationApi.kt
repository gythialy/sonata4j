/**
 * MEF LSO Sonata
 *  A set of APIs based on the LSO Reference Architecture for Serviceability (Address Validation, Site Queries, Product Offering Qualification) | Quoting | Product Inventory | Ordering | Trouble-ticketing Billing | Contract & Catalog
 *
 * OpenAPI spec version: 3.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.server.apis

// ktor 0.9.x is missing io.ktor.locations.DELETE, this adds it.
// see https://github.com/ktorio/ktor/issues/288

import com.google.gson.Gson
import io.ktor.application.call
import io.ktor.auth.OAuthAccessTokenResponse
import io.ktor.auth.authentication
import io.ktor.auth.oauth
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.Route
import io.ktor.routing.application
import io.ktor.routing.post
import io.ktor.routing.route
import io.swagger.server.ApplicationAuthProviders
import io.swagger.server.ApplicationExecutors
import io.swagger.server.HTTP.client
import kotlinx.coroutines.experimental.asCoroutineDispatcher

fun Route.GeographicAddressValidationApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    route("/geographicAddressManagement/v3/geographicAddressValidation") {
        post {
            val principal = call.authentication.principal<OAuthAccessTokenResponse>()

            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json;charset=utf-8"
                val exampleContentString = """{
                  "verifiedAddress" : [ {
                    "formattedAddress" : {
                      "country" : "country",
                      "postCodeExtension" : "postCodeExtension",
                      "stateOrProvince" : "stateOrProvince",
                      "city" : "city",
                      "addrLine2" : "addrLine2",
                      "addrLine1" : "addrLine1",
                      "locality" : "locality",
                      "postcode" : "postcode",
                      "id" : "id"
                    },
                    "@type" : "@type",
                    "hasPublicSite" : true,
                    "isBestMatch" : true,
                    "allowsNewSite" : true,
                    "fieldedAddress" : {
                      "country" : "country",
                      "postCodeExtension" : "postCodeExtension",
                      "streetType" : "streetType",
                      "city" : "city",
                      "streetNr" : "streetNr",
                      "locality" : "locality",
                      "postcode" : "postcode",
                      "streetNrLast" : "streetNrLast",
                      "streetNrSuffix" : "streetNrSuffix",
                      "streetName" : "streetName",
                      "stateOrProvince" : "stateOrProvince",
                      "streetNrLastSuffix" : "streetNrLastSuffix",
                      "geographicSubAddress" : [ {
                        "buildingName" : "buildingName",
                        "subUnit" : [ {
                          "subUnitType" : "subUnitType",
                          "subUnitIdentifier" : "subUnitIdentifier"
                        }, {
                          "subUnitType" : "subUnitType",
                          "subUnitIdentifier" : "subUnitIdentifier"
                        } ],
                        "@type" : "@type",
                        "levelType" : "levelType",
                        "levelNumber" : "levelNumber",
                        "id" : "id",
                        "@schemaLocation" : "@schemaLocation",
                        "privateStreetNumber" : "privateStreetNumber",
                        "privateStreetName" : "privateStreetName"
                      }, {
                        "buildingName" : "buildingName",
                        "subUnit" : [ {
                          "subUnitType" : "subUnitType",
                          "subUnitIdentifier" : "subUnitIdentifier"
                        }, {
                          "subUnitType" : "subUnitType",
                          "subUnitIdentifier" : "subUnitIdentifier"
                        } ],
                        "@type" : "@type",
                        "levelType" : "levelType",
                        "levelNumber" : "levelNumber",
                        "id" : "id",
                        "@schemaLocation" : "@schemaLocation",
                        "privateStreetNumber" : "privateStreetNumber",
                        "privateStreetName" : "privateStreetName"
                      } ],
                      "streetSuffix" : "streetSuffix",
                      "id" : "id"
                    },
                    "id" : "id",
                    "@schemaLocation" : "@schemaLocation"
                  }, {
                    "formattedAddress" : {
                      "country" : "country",
                      "postCodeExtension" : "postCodeExtension",
                      "stateOrProvince" : "stateOrProvince",
                      "city" : "city",
                      "addrLine2" : "addrLine2",
                      "addrLine1" : "addrLine1",
                      "locality" : "locality",
                      "postcode" : "postcode",
                      "id" : "id"
                    },
                    "@type" : "@type",
                    "hasPublicSite" : true,
                    "isBestMatch" : true,
                    "allowsNewSite" : true,
                    "fieldedAddress" : {
                      "country" : "country",
                      "postCodeExtension" : "postCodeExtension",
                      "streetType" : "streetType",
                      "city" : "city",
                      "streetNr" : "streetNr",
                      "locality" : "locality",
                      "postcode" : "postcode",
                      "streetNrLast" : "streetNrLast",
                      "streetNrSuffix" : "streetNrSuffix",
                      "streetName" : "streetName",
                      "stateOrProvince" : "stateOrProvince",
                      "streetNrLastSuffix" : "streetNrLastSuffix",
                      "geographicSubAddress" : [ {
                        "buildingName" : "buildingName",
                        "subUnit" : [ {
                          "subUnitType" : "subUnitType",
                          "subUnitIdentifier" : "subUnitIdentifier"
                        }, {
                          "subUnitType" : "subUnitType",
                          "subUnitIdentifier" : "subUnitIdentifier"
                        } ],
                        "@type" : "@type",
                        "levelType" : "levelType",
                        "levelNumber" : "levelNumber",
                        "id" : "id",
                        "@schemaLocation" : "@schemaLocation",
                        "privateStreetNumber" : "privateStreetNumber",
                        "privateStreetName" : "privateStreetName"
                      }, {
                        "buildingName" : "buildingName",
                        "subUnit" : [ {
                          "subUnitType" : "subUnitType",
                          "subUnitIdentifier" : "subUnitIdentifier"
                        }, {
                          "subUnitType" : "subUnitType",
                          "subUnitIdentifier" : "subUnitIdentifier"
                        } ],
                        "@type" : "@type",
                        "levelType" : "levelType",
                        "levelNumber" : "levelNumber",
                        "id" : "id",
                        "@schemaLocation" : "@schemaLocation",
                        "privateStreetNumber" : "privateStreetNumber",
                        "privateStreetName" : "privateStreetName"
                      } ],
                      "streetSuffix" : "streetSuffix",
                      "id" : "id"
                    },
                    "id" : "id",
                    "@schemaLocation" : "@schemaLocation"
                  } ],
                  "validationResult" : { },
                  "id" : "id",
                  "requestedAddress" : {
                    "formattedAddress" : {
                      "country" : "country",
                      "postCodeExtension" : "postCodeExtension",
                      "stateOrProvince" : "stateOrProvince",
                      "city" : "city",
                      "addrLine2" : "addrLine2",
                      "addrLine1" : "addrLine1",
                      "locality" : "locality",
                      "postcode" : "postcode"
                    },
                    "fieldedAddress" : {
                      "country" : "country",
                      "postCodeExtension" : "postCodeExtension",
                      "streetType" : "streetType",
                      "city" : "city",
                      "streetNr" : "streetNr",
                      "locality" : "locality",
                      "postcode" : "postcode",
                      "streetNrLast" : "streetNrLast",
                      "streetNrSuffix" : "streetNrSuffix",
                      "streetName" : "streetName",
                      "stateOrProvince" : "stateOrProvince",
                      "streetNrLastSuffix" : "streetNrLastSuffix",
                      "geographicSubAddress" : {
                        "buildingName" : "buildingName",
                        "subUnit" : [ {
                          "subUnitType" : "subUnitType",
                          "subUnitIdentifier" : "subUnitIdentifier"
                        }, {
                          "subUnitType" : "subUnitType",
                          "subUnitIdentifier" : "subUnitIdentifier"
                        } ],
                        "@type" : "@type",
                        "levelType" : "levelType",
                        "levelNumber" : "levelNumber",
                        "@schemaLocation" : "@schemaLocation",
                        "privateStreetNumber" : "privateStreetNumber",
                        "privateStreetName" : "privateStreetName"
                      },
                      "streetSuffix" : "streetSuffix"
                    }
                  },
                  "validationDate" : "2000-01-23T04:56:07.000+00:00"
                }"""

                when (exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
            .apply {
                // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
                //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

                try {
                    authentication {
                        oauth(client, ApplicationExecutors.asCoroutineDispatcher(), { ApplicationAuthProviders["bearer"] }, {
                            // TODO: define a callback url here.
                            "/"
                        })
                    }
                } catch (e: io.ktor.application.DuplicateApplicationFeatureException) {
                    application.environment.log.warn("authentication block for '/geographicAddressManagement/v3/geographicAddressValidation' is duplicated in code. " +
                            "Generated endpoints may need to be merged under a 'route' entry.")
                }
            }
}
